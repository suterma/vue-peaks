{"version":3,"file":"vue-peaks.es.js","sources":["../src/components/AudioPeaks.vue","../src/ViewerPlugin.ts"],"sourcesContent":["<script setup lang=\"ts\">\nimport { shallowRef, onMounted, type ShallowRef, onBeforeUnmount } from 'vue';\nimport Peaks, {\n  type PeaksInstance,\n  type PeaksOptions as PeaksOptions,\n} from 'peaks.js';\n\nconst props = defineProps<{\n  /** The audio source URL (for the \"simple\" mode)\n   * @remarks This URL is to be used internally with the default media slot\n   * (no slot template or external media element id is expected)\n   */\n  src?: string;\n\n  /** The unique identifier of an external zoomview element to use.\n   * @remarks Allows the use of an external zoomview element.\n   * (no slot template is expected or used for the zoomview)\n   */\n  zoomviewElementId?: string;\n\n  /** The zoomview element to use.\n   * @remarks Allows the use of an external zoomview element.\n   * (no slot template is expected or used for the zoomview)\n   */\n  zoomviewElement?: HTMLDivElement;\n\n  /** The unique identifier of an external overview element to use.\n   * @remarks Allows the use of an external overview element.\n   * (no slot template is expected or used for the overview)\n   */\n  overviewElementId?: string;\n\n  /** The overview element to use.\n   * @remarks Allows the use of an external overview element.\n   * (no slot template is expected or used for the overview)\n   */\n  overviewElement?: HTMLDivElement;\n\n  /** The unique identifier of an external media element to use. (for the \"external\" mode)\n   * @remarks Allows the use of an external media element.\n   * (no slot template or audio source URL is expected)\n   */\n  mediaElementId?: string;\n\n  /** The external media element to use. (for the \"external\" mode)\n   * @remarks Allows the use of an external media element.\n   * (no slot template or audio source URL is expected)\n   */\n  mediaElement?: HTMLMediaElement;\n\n  /** The peaks options to use.\n   * @remarks The element references to the overview, zoomview and media element\n   * should not be provided, because these are handled internally by AudioPeaks.\n   * This removes the burden of management of the Vue ref lifecycle from the user.\n   * @devdoc Refs to HTML elements can only be accessed after mount.\n   * See https://vuejs.org/guide/essentials/template-refs.html#accessing-the-refs\n   */\n  options?: PeaksOptions;\n}>();\n\n/** The peaks instance MUST NOT be deeply reactive for performance reasons.\n * @devdoc See https://github.com/bbc/peaks.js/issues/406#issuecomment-1225885020 in peaks.js\n * and this documentation https://vuejs.org/api/reactivity-advanced.html#shallowref about shallow references\n */\nconst peaksInstance = shallowRef<PeaksInstance | undefined>(undefined);\nconst overview = shallowRef(null);\nconst overviewSlot = shallowRef(null);\nconst zoomview = shallowRef(null);\nconst zoomviewSlot = shallowRef(null);\nconst audio = shallowRef(null);\nconst audioSlot = shallowRef(null);\nconst zoomLevel = shallowRef<number | undefined>(undefined);\n\ndefineExpose({\n  /** The peaks.js instance is deliberately exposed, to allow direct use of the various APIs.\n   * @remarks The instance is only available after the mounted lifecycle event and once\n   * peaks.js has properly initialized.\n   */\n  peaksInstance,\n});\n\nonMounted(() => {\n  createPeaksInstance();\n});\n\nonBeforeUnmount(() => {\n  destroyPeaksInstance();\n});\n\n/** Initializes the peaks instance\n * @remarks If no options are provided by the respective component property, some default options are used.\n * @devdoc Must be called only after mount, because the expected HTML elements must be addressable already by their id.\n * @devdoc A currently unused variant for referencing an audio element from the template via reference uses\n * // reference on the component level\n * const audio = shallowRef(null);\n * // getting the element\n * (audio.value as unknown as HTMLAudioElement)\n */\nfunction createPeaksInstance() {\n  console.debug('AudioPeaks::createPeaksInstance:options:', props.options);\n\n  const overviewElement = get<HTMLDivElement>(\n    props.overviewElement,\n    props.overviewElementId,\n    overview,\n    overviewSlot,\n    'div'\n  );\n  const zoomviewElement = get<HTMLDivElement>(\n    props.zoomviewElement,\n    props.zoomviewElementId,\n    zoomview,\n    zoomviewSlot,\n    'div'\n  );\n  const mediaElement = get<HTMLMediaElement>(\n    props.mediaElement,\n    props.mediaElementId,\n    audio,\n    audioSlot,\n    'audio'\n  );\n\n  if (props.options) {\n    (props.options.containers = {\n      overview: overviewElement,\n      zoomview: zoomviewElement,\n    }),\n      (props.options.mediaElement = mediaElement);\n  }\n\n  const options: PeaksOptions = props.options\n    ? props.options\n    : {\n      containers: {\n        overview: overviewElement,\n        zoomview: zoomviewElement,\n      },\n      mediaElement: mediaElement,\n      webAudio: {\n        audioContext: new AudioContext(),\n      },\n      zoomLevels: [256, 512, 1024, 2048, 4096],\n    };\n\n  Peaks.init(options, function (err, peaks) {\n    if (err) {\n      console.error(err);\n    }\n    peaksInstance.value = peaks;\n    zoomLevel.value = peaks?.zoom.getZoom();\n  });\n}\n\n/** Destroys the peaks instance\n */\nfunction destroyPeaksInstance() {\n  peaksInstance.value?.destroy();\n}\n\n/** Gets the HTML element to act upon, using the first of the provided options\n * @remarks This is either (first in the following order)\n * - the element provided as object\n * - the element provided by id\n * - the element from the (internal) slot template\n * - the first element from a provided external slot template\n * If none is found 'undefined' is returned, which will throw an error in peaks.js\n * @param elm The element\n * @param htmlElementId The HTML element id\n * @param ref The reference to the element\n * @param slotRef The reference to the slot containing the element\n * @param slotRefHtmlTagName The required tag name of the element in the slot\n * @return The found element or undefined if none is found\n */\nfunction get<HEType extends HTMLElement>(\n  elm: HEType | undefined,\n  htmlElementId: string | undefined,\n  ref: ShallowRef,\n  slotRef: ShallowRef,\n  slotRefHtmlTagName: string\n): HEType | undefined {\n  if (elm) {\n    console.debug('AudioPeaks::Found elm: ', elm);\n    return elm;\n  }\n  if (htmlElementId) {\n    console.debug('AudioPeaks::Found element by id: ', htmlElementId);\n    return document.getElementById('' + htmlElementId) as unknown as HEType;\n  }\n\n  // The reference can be used only with the default slot\n  const elementByRef = ref.value as unknown as HEType;\n  if (elementByRef) {\n    console.debug('AudioPeaks::Found element by Ref: ', elementByRef);\n    return elementByRef;\n  }\n\n  // With external slot templates, the element can not be referenced with a ref directly\n  // (because external slot templates can not set refs to enclosed elements from the outside)\n  // First get a reference to the slot then find the first element of the given type\n  const externalSlot = slotRef.value as unknown as HTMLElement;\n  if (externalSlot) {\n    const elementByFirstInSlot = externalSlot.getElementsByTagName(\n      slotRefHtmlTagName\n    )[0] as unknown as HEType;\n    if (elementByFirstInSlot) {\n      console.debug(\n        'AudioPeaks::Found element by first in slot: ',\n        elementByFirstInSlot\n      );\n      return elementByFirstInSlot;\n    }\n  }\n}\n\nfunction zoomIn(): void {\n  peaksInstance.value?.zoom.zoomIn();\n  zoomLevel.value = peaksInstance.value?.zoom.getZoom();\n}\nfunction zoomOut(): void {\n  peaksInstance.value?.zoom.zoomOut();\n  zoomLevel.value = peaksInstance.value?.zoom.getZoom();\n}\n</script>\n\n<template>\n  <div ref=\"overviewSlot\">\n    <!-- If an external overview element is referenced, the overview slot is not used -->\n    <slot name=\"overview\" v-if=\"!props.overviewElementId && !props.overviewElement\">\n      <div class=\"peaks-overview\" ref=\"overview\"></div>\n    </slot>\n  </div>\n\n  <div ref=\"zoomviewSlot\">\n    <!-- If an external zoomview element is referenced, the zoomview slot is not used -->\n    <slot name=\"zoomview\" v-if=\"!props.zoomviewElementId && !props.zoomviewElement\">\n      <div class=\"peaks-zoomview\" ref=\"zoomview\"></div>\n    </slot>\n  </div>\n\n  <div ref=\"audioSlot\">\n    <!-- If an external media element is referenced, the default slot is not used -->\n    <slot name=\"default\" v-if=\"!props.mediaElementId && !props.mediaElement\">\n      <!-- The default content slot for the \"slot\" mode -->\n      <audio class=\"peaks-audio\" ref=\"audio\" controls>\n        <source :src=\"src\" />\n      </audio>\n    </slot>\n  </div>\n  <slot name=\"controls\">\n    <div class=\"peaks-controls\">\n      <button @click=\"zoomIn()\">Zoom in</button>&nbsp;\n      <button @click=\"zoomOut()\">Zoom out</button>&nbsp;\n      <span>Zoom level: {{ zoomLevel }}</span>\n    </div>\n  </slot>\n</template>\n\n<style scoped>\n.peaks-audio,\n.peaks-overview,\n.peaks-zoomview {\n  width: 100%;\n}\n\n.peaks-overview,\n.peaks-zoomview {\n  height: 100px;\n}\n</style>\n","import type { App } from 'vue';\nimport { AudioPeaks } from './components';\n\nexport default {\n  install: (app: App) => {\n    app.component('AudioPeaks', AudioPeaks);\n  },\n};\n\nexport { AudioPeaks };\n"],"names":["peaksInstance","shallowRef","overview","overviewSlot","zoomview","zoomviewSlot","audio","audioSlot","zoomLevel","expose","onMounted","createPeaksInstance","onBeforeUnmount","destroyPeaksInstance","props","overviewElement","get","zoomviewElement","mediaElement","options","Peaks","err","peaks","_a","elm","htmlElementId","ref","slotRef","slotRefHtmlTagName","elementByRef","externalSlot","elementByFirstInSlot","zoomIn","_b","zoomOut","ViewerPlugin","app","AudioPeaks"],"mappings":"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"}